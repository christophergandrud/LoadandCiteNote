\documentclass[a4paper]{report}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{RJournal}
\usepackage{amsmath,amssymb,array}
\usepackage{booktabs}

%% load any required packages here

\begin{document}

%% do not edit, for illustration only
\sectionhead{Contributed research article}
\volume{XX}
\volnumber{YY}
\year{20ZZ}
\month{AAAA}

%% replace RJtemplate with your article
\begin{article}

\title{Automating R Package Citations in Reproducible Research Documents}
\author{Christopher Gandrud\footnote{I would like to thank Karthik Ram, who contributed code to the command, as well as two reviewers including Carl Boettiger. The full source code files used to create this paper are available at: \url{https://github.com/christophergandrud/LoadandCiteNote}}}

\maketitle

\abstract{
  All of the R packages a reproducible computational research document relies on should be fully cited. R packages' syntax and capabilities change over time. If a piece of research does not fully cited the versions of the packages it used, it will be difficult to reproduce it. In this short note I introduce the \code{LoadandCite} command from the \pkg{repmis} R package. The command makes it much easier to document the R packages a piece of research depends on. If included in a dynamic reproducible research document, \code{LoadandCite} can (a) load all the R packages used to create the document, (b) create a BibTeX file that is updated every time the document is compiled with each loaded package's full citation information. It also allows the user to install the packages, including specific versions. Using this command makes it easier to create really reproducible research with R.
}

<<SetUp, include=FALSE>>=
PackagesToLoad <- c("car", "knitr", "repmis", "utils")
repmis::LoadandCite(pkgs = PackagesToLoad, file = "GandrudPackages.bib")
@

One of R's \citep{CiteR} main advantages is its very active community of developers who are rapidly improving and expanding its capabilities by creating add-on packages. Many pieces of computational research now depend on these packages. The rapid pace of package development does have an important drawback: it can quickly become difficult to reproduce research\footnote{For a discussion of the importance of reproducibility in computational research see \cite{Peng2011}.} that depends on particular package versions. So, for research to be really reproducible it is very important that researchers fully cite--including the version number--all of the R packages that their results depend on \citep[see][for more details]{Jackson2012} as well as the version of R that they used.

However, we can do better than just create a static package citation list. There are two practical problems that are not solved by simply including citations in a static bibliography. First, though we may intend to fully cite the versions of the packages we used in our research, we may not actually do so. This is especially true if there are a number of packages that are updated over the course of the research process. If the package version cited differs from the one actually used and there have been syntax or other changes to the packages between the two versions, then it could be very difficult to reproduce the research. Second, to make our research really reproducible it should be reasonably \emph{easy} for other researchers to not only understand how results were achieved in the abstract, but also replicate these results. Literate programming technologies, such as \CRANpkg{knitr} \citep{R-knitr}, have made it much easier to reproduce research results. Nontheless, would-be reproducers face an important obstacle when they compile these documents: they need to install any package dependencies that they don't already have. This may involve arduously hunting down one-by-one specific versions of the packages used in the original paper. 

In this short note I propose and demonstrate a solution to these two problems. Researchers can use the \code{LoadandCite} command from the \CRANpkg{repmis} package \citep{R-repmis} in their reproducible research documents to (a) load all of the packages that they used to create the document, (b) create a BibTeX file that is updated every time the document is compiled with each loaded packageâ€™s full citation information, and (c) install specific package versions. The note finishes with a discussion of three additional issues that are important to consider when documenting the packages you use.

\section{Basic Syntax}

Let's look at the basic \code{LoadandCite} syntax. Below, we'll see how to use it in reproducible LaTeX documents. The main argument that \code{LoadandCite} takes is a character vector of package names. For example, to load the \CRANpkg{car} \citep{R-car} and \CRANpkg{knitr} packages create the following character vector:

\begin{example}
  Packages <- c("car", "knitr")
\end{example}

\noindent We can now simply add this vector object to \code{LoadandCite}'s \code{pkgs} argument. We can also specify the name of the BibTeX file that we want to create and save the citations to with the \code{file} argument.\footnote{If no file is specified, then the packages are only loaded.} Let's use the file name \file{Example.bib}:

\begin{example}
  repmis::LoadandCite(pkgs = Packages, file = "Example.bib")
\end{example}

\noindent The two packages will be loaded and a BibTeX file with citation information for the loaded versions created in the working directory. A citation for the running version of R will also be included in this file. \strong{Note} it is important to use a file name that is different from the one you use for non-R package citations. Otherwise you will accidentally overwrite your other citations.

You can leave the \code{pkgs} argument unspecified. If you do this \code{LoadandCite} will only create a BibTeX file with an entry for R and all of the non-base packages loaded in the current session. No packages will be loaded or installed. Using \code{LoadandCite} in this way implies a different workflow discussed in more detail below.

The \emph{Journal of Statistical Software}, a popular journal for papers that cite R packages, requires special formatting. In particular \code{pkg} must be used for all package names and \code{proglang} must be used with programming language names. Set the \code{style = `JSS'} argument to automatically add these commands to all of the citations. Please review the citation as the commands will not be included for references to packages or programming languages in the entries' subtitles.

\subsection{Installing packages in addition to loading and citing them}

If we want to have the packages installed as well as loaded and cited, we can set the argument \code{install = TRUE}. This will install the most recent version of the packages from the repository specified in the \code{repos} argument.\footnote{\code{repos}' default is the user's default.} If we want to install specific package versions, we can include a character vector of package version numbers to have \code{LoadandCite} install from CRAN. The order of the package versions must match the order of the packages listed in the \code{pkgs} argument. For example, to install \CRANpkg{car} version 2.0-17 and \CRANpkg{knitr} version 1.1 use:

\begin{example}
  Vers <- c("2.0-17", "1.1")

  repmis::LoadandCite(pkgs = Packages, install = TRUE,
                      versions = Vers, file = "Example.bib")
\end{example}


\noindent \textbf{Warning:} you should avoid using old package versions in active research projects as they may contain bugs that were addressed in subsequent updates. It is better to specify the versions only in documents you are making available for replication.\footnote{If \code{install = FALSE} (the default) then specific package versions will not be installed, i.e. \code{LoadandCite} will ignore any values in the \code{versions} argument.} Likewise, you probably only want to set \code{install = TRUE} in a file intended for replication. It will be unnecessarily and time consuming to install the packages every time you run your code.

If you are reproducing a piece of research and installing old package versions, it can be a good idea to install these into a separate library from the one(s) you normally use. You can specify what library to have \code{LoadandCite} install the packages into with the \code{lib} argument.\footnote{If needed, remember to then add this library path to R with \code{.libPath}.}

R packages may depend on specific versions of R itself. The \code{Rversion} argument allows you to specify the version of R that you used to create your analysis. If you set, for example, the argument \code{Rversion = '3.0.2'} then \code{LoadandCite} will check if the currently running version of R is 3.0.2. If it is not, a waring will be printed. Old versions of R can be downloaded from CRAN. Note that you may not be able to install an old version because it does not run on your system. This  

\section{Using \code{LoadandCite} in a Knitted LaTeX Document}

Possibly the best way to use \pkg{LoadandCite} with your research is to place it in a `code chunk' at the beginning of a \CRANpkg{knitr} created LaTeX document.\footnote{The command also works with a \CRANpkg{knitr} Markdown document rendered with \href{http://johnmacfarlane.net/pandoc/}{Pandoc}. This can be useful for creating reproducible webpages. See the \href{http://yihui.name/knitr/demo/pandoc/}{knitr documentation site} for how to use Pandoc from R.} Doing this will load every R package used to create the document and update the bibliography file every time you knit it. For example:

\begin{example}
\textless{\textless}include=FALSE\textgreater{\textgreater}=
  Packages <- c("car", "knitr", "repmis")
  repmis::LoadandCite(pkgs = Packages, file = "Example.bib")
@
\end{example}

\noindent The code \code{\textless{\textless}include=FALSE\textgreater{\textgreater}=} and \code{@} delimit the beginning and end of the R code chunk. The \code{include=FALSE} option tells \CRANpkg{knitr} to not include any messages, warnings, and so on created by running the code in the compiled presentation document. For more information on how to create reproducible research documents with \CRANpkg{knitr} see \cite{Xie2013} and \cite{Gandrud2013}.

If you place \code{LoadandCite} at the beginning of the document you obviously do not need load the packages in later code chunks with \code{library} or \code{require}. If you place it at the end and leave the \code{pkgs} argument unspecified, then the packages will need to be loaded earlier. Also, you will clearly not be able to install specific version that will be used in the analyses as the analyses will already have been run. 

You can cite the packages in your document using BibTeX cite keys as usual. The BibTeX keys created by \code{LoadandCite}\footnote{The keys are generated with code modified from \CRANpkg{knitr}'s \code{write\_bib} command. \code{LoadandCite} does not formally depend on \CRANpkg{knitr} to make it possible to install old versions of that package.} have the following pattern \code{R-PACKAGE\_NAME}. For example, the \CRANpkg{car} package's cite key will be \code{R-car}. To insert a citation for the \CRANpkg{car} package like `\citep{R-car}' in the text of your document simply type: \verb|\citep{R-car}| in your LaTeX document where you would like the citation to appear. \code{LoadandCite} automatically generates a citation for the currently running version of R. The cite key that it assigns is \code{CiteR}.

Additionally add the name of the BibTeX file created by \code{LoadandCite} to your \code{bibliography} command near the end of your LaTeX document, i.e. \verb|\bibliography{Example}|. Note that because \CRANpkg{repmis} is itself an add-on R package, you should clearly inform anyone who would want to reproduce your research that they need to install it first before running \code{LoadandCite}. You could do this in a README file accompanying the replication files.

\section{Issues to Keep in Mind}

Before finishing, it is important to address three issues that researchers should consider when using the command: (1) the need to manually verify automatically generated citations, (2) issues with installing old packages, and (3) difficulties future-proofing your research not addressed by \code{LoadandCite}.

\subsection{Pitfalls of automatically generating package citations}

Though \code{LoadandCite} makes it much easier to cite the packages used to create an analysis, how easy it is depends on each package's developers/maintainers to properly document their packages. Most packages hosted on sites such as the Comprehensive R Archive Network (\href{http://cran.r-project.org/}{CRAN}) are relatively well documented. However, their documentation may lack key information, such as the date or author, or this information may be incorrect. The documentation may also include typos. Some know issues are automatically corrected for if the argument \code{tweak = TRUE} is set.\footnote{This draws directly on tweaks written in \code{write\_bib}.} Nonetheless other errors almost certainly exist. So it is important to check the citations and manually make corrections to the BibTeX entries before publication. If you notice errors in a package's documentation consider informing the package maintainer. Though it is a nuisance to have to hand check and possibly edit citations before publication, using \code{LoadandCite} to generate the initial BibTeX file does make the process of accurately citing the packages you use much easier. 

Furthermore, you may need to manually change the formatting of the citations to fit a publication's style. \code{LoadandCite} has attempted to automate this process somewhat for articles submitted to the \emph{Journal of Statistical Software} and the \emph{R Journal} as mentioned above. 

Some package authors prefer that you cite not only the package version you are using, but also another text, such as a journal article or book used to create the package. \code{LoadandCite} only cites the version of the package being used, not ancillary published material that may be included in a packages CITATION file. This is primarily because (a) \code{LoadandCite} is focused on automating the citation package \emph{versions} that could change over the course of the research process and (b) to avoid duplications that may occur if the user cites the ancillary material using a separate citation key. So, please remember to cite ancillary work related to the package separately.

\subsection{Pitfalls of installing old packages}

FILL IN

Not all packages work with every system. Some old package versions may also not work with every version of R.  

\subsection{Difficulties future-proofing your research}

Relatedly not all 

\section{Summary}

R's capabilities are developing very quickly. To be able to take advantage of these expanding capabilities while also making our research easily reproducible in the future, we need to make sure that the add-on packages we use are fully cited and that it is easy for future users to install the versions we used. Using \code{LoadandCite} in dynamically created research documents helps us do this. 

\bibliography{GandrudPackages,Gandrud}

\address{Christopher Gandrud\\
  Hertie School of Governance\\
  Friedrichstrasse 180\\
  Berlin, 10117\\
  Germany} \\
\email{christopher.gandrud@gmail.com}

\end{article}

\end{document}